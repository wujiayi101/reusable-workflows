name: semver
on:
  workflow_call:

jobs:
  detect:
    runs-on: ubuntu-latest
    name: "Detect pull request context"
    outputs:
      release-type: ${{ steps.check_pr_label.outputs.release-type}}
      is-merge-event: >-
        ${{ github.event_name == 'pull_request_target'
         && github.event.action == 'closed'
         && github.event.pull_request.merged == true }}
    steps:
      - name: Check PR labels
        id: check_pr_label
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          LABELS=$(gh pr view $PR_URL --json labels  --jq '.labels[]| select((.name=="minor") or (.name=="major") or (.name=="patch") or (.name=="no-release")) |.name')
          NUMBER_OF_LABELS=$(echo "$LABELS" |wc -w)
          if [ "$NUMBER_OF_LABELS" -eq "1" ] ; then
            echo "Found: $LABELS"
            echo "release-type=$LABELS" >> "$GITHUB_OUTPUT"
          elif [ "$NUMBER_OF_LABELS" -gt "1" ] ; then
            echo "::error ::Too many release type labels: $( echo $LABELS | tr '\n' ' ' )"
            exit 1
          else
            echo "::error ::No release type labels found(patch/minor/major/no-release)"
            exit 2
          fi

  plan:
    needs: detect
    if: needs.detect.outputs.release-type != 'no-release'
    runs-on: ubuntu-latest
    name: "Gather Info"
    steps:
      - name: Detect previous version number
        uses: actions/github-script@v6.4.1
        id: prev-version
        with:
          script: |
            const { owner, repo } = context.repo;
            const query = `query($owner: String!, $repo: String!, $refPrefix: String!) {
              repository(owner: $owner, name: $repo) {
                refs(refPrefix: $refPrefix, first: 1, orderBy: {field: TAG_COMMIT_DATE, direction: DESC}) {
                  edges { node { name } }
                }
              }
            }`;
            const result = await github.graphql(query, { owner, repo,
              refPrefix: `refs/tags/`,
            });
            const prevNode = result.repository.refs.edges[0];
            const prevVer = prevNode ? prevNode.node.name : '0.0.0';
            console.log('Found previous version', prevVer);
            return prevVer;
          result-encoding: string

      - name: Determine new version number
        uses: actions/github-script@v4.2.0
        id: new-version
        env:
          PREV_VERSION: "${{ steps.prev-version.outputs.result }}"
          RELEASE_TYPE: "${{ needs.detect.outputs.release-type }}"
        with:
          script: |
            const { PREV_VERSION, RELEASE_TYPE } = process.env;
            console.log('Previous version was', PREV_VERSION);
            console.log('Release type is', RELEASE_TYPE);

            const versionWithoutV = PREV_VERSION.startsWith('v') ? PREV_VERSION.slice(1) : PREV_VERSION;

            const numbers = versionWithoutV.split('.');
            const numberIdx = ['major', 'minor', 'patch'].indexOf(RELEASE_TYPE);
            numbers[numberIdx] = parseInt(numbers[numberIdx]) + 1;
            for (let i = numberIdx + 1; i < numbers.length; i++) {
              numbers[i] = 0;
            }

            const newVersion = (PREV_VERSION.startsWith('v') ? 'v' : '') + numbers.join('.');
            console.log('New version is', newVersion);
            return newVersion
          result-encoding: string

      - name: Store version numbers
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          mkdir output
          echo '${{ steps.prev-version.outputs.result }}' > output/previous-version.txt
          echo '${{ steps.new-version.outputs.result }}' > output/new-version.txt

      - name: Extract changelog entry
        uses: wujiayi101/reusable_workflows/.github/actions/extract-changelog-entry@actions-extract-changelog-entry/1.0.0

      - name: Upload result artifacts
        uses: actions/upload-artifact@v3.1.3
        with:
          name: "release"
          path: output
          retention-days: 5

  comment:
    needs: [detect, plan]
    if: needs.detect.outputs.is-merge-event == 'false'
    runs-on: ubuntu-latest
    name: "Comment on PR"
    steps:
      - uses: actions/download-artifact@v3.0.2
        with:
          path: outputs
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: outputs

      - uses: actions/github-script@v4.2.0
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: issue_number } = context.issue;
            const { readdir, readFile } = require('fs').promises;
            const utf8 = { encoding: 'utf-8' };

            const lines = [
              '# Release plan', '',
              '| Previous version | New version |',
              '|--|--|',
            ];
            const sections = [];

            for (const folder of await readdir('outputs', { withFileTypes: true })) {
              if (!folder.isDirectory()) continue;
              const readText = (name) => readFile(name, utf8).then(x => x.trim());

              lines.push('| '+[
                `${await readText(`outputs/${folder.name}/previous-version.txt`)}`,
                `**${await readText(`outputs/${folder.name}/new-version.txt`)}**`,
              ].join(' | ')+' |');

              sections.push(`<details><summary>Changelog preview: </summary>\n\n${await readText(`outputs/${folder.name}/changelog.md`)}\n</details>`);
            }

            const finalBody = [lines.join('\n'), ...sections].join('\n\n');

            const {data: allComments} = await github.issues.listComments({ issue_number, owner, repo });
            const ourComments = allComments
              .filter(comment => comment.user.login === 'github-actions[bot]')
              .filter(comment => comment.body.startsWith(lines[0]+'\n'));

            const latestComment = ourComments.slice(-1)[0];
            if (latestComment && latestComment.body === finalBody) {
              console.log('Existing comment is already up to date.');
              return;
            }

            const {data: newComment} = await github.issues.createComment({ issue_number, owner, repo, body: finalBody });
            console.log('Posted comment', newComment.id, '@', newComment.html_url);
            // Delete all our previous comments
            for (const comment of ourComments) {
              if (comment.id === newComment.id) continue;
              console.log('Deleting previous PR comment from', comment.created_at);
              await github.issues.deleteComment({ comment_id: comment.id, owner, repo });
            }

  trigger-release:
    needs: [detect, plan]
    if: needs.detect.outputs.is-merge-event == 'true'
    runs-on: ubuntu-latest
    name: "Dispatch release event"
    steps:
      - uses: actions/download-artifact@v3.0.2
        with:
          path: outputs

      - name: Combine version information
        id: extract-releases
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const { readdir, readFile } = require('fs').promises;
            const utf8 = { encoding: 'utf-8' };
            const readText = (name) => readFile(name, utf8).then(x => x.trim());

            const directories = await readdir('outputs', { withFileTypes: true });
            return await Promise.all(directories
              .filter(x => x.isDirectory())
              .map(async folder => ({
                module: folder.name,
                prevVersion: await readText(`outputs/${folder.name}/previous-version.txt`),
                newVersion: await readText(`outputs/${folder.name}/new-version.txt`),
                changelog: await readText(`outputs/${folder.name}/changelog.md`),
              })));

      - name: Dispatch monorepo_release event
        uses: actions/github-script@v4.2.0
        env:
          RELEASE_LIST: "${{ steps.extract-releases.outputs.result }}"
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const payload = {
              run_id: "${{ github.run_id }}",
              sha: context.sha,
              releases: JSON.parse(process.env.RELEASE_LIST),
            };
            console.log('Event payload:', JSON.stringify(payload, null, 2));

            const { owner, repo } = context.repo;
            await github.repos.createDispatchEvent({
              owner, repo,
              event_type: 'module_release',
              client_payload: payload,
            });
